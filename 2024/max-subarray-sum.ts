// Задача: Найбільша підрядкова сума
// Опис задачі:
//
//   Дано масив цілих чисел nums, знайдіть найбільшу суму підмасиву.
//
//   Вхідні дані:
//
//   Масив nums довжиною n (1 ≤ n ≤ 10^5), де nums[i] є цілим числом.
//   Вихідні дані:
//
//   Найбільша сума підмасиву.
//   Приклад:
//
// Вхід: nums = [1, -2, 3, 4, -1, 2, 1, -5, 4]
//
// Вихід: 9
// Пояснення: Найбільша сума підмасиву - це [3, 4, -1, 2, 1], сума якого дорівнює 9.
// Вхід: nums = [-1, -2, -3, -4]
//
// Вихід: -1
// Пояснення: Найбільша сума підмасиву - це -1, оскільки всі елементи негативні.
//   Примітка:
//
// Підмасив повинен бути непорожнім.

function maxSubarraySum(nums: number[]): number {
  // Перевіряємо, чи масив порожній
  if (nums.length === 0) return 0;

  // Ініціалізуємо змінні:
  // maxCurrent зберігає максимальну суму підмасиву, що закінчується в поточному елементі
  // maxGlobal зберігає максимальну суму серед усіх підмасивів, знайдених до тепер
  let maxCurrent = nums[0];
  let maxGlobal = nums[0];

  // Проходимо через масив, починаючи з другого елемента
  for (let i = 1; i < nums.length; i++) {
    // Визначаємо, чи включати поточний елемент в підмасив, що закінчується на попередньому елементі
    // або почати новий підмасив з поточного елемента
    maxCurrent = Math.max(nums[i], maxCurrent + nums[i]);

    // Оновлюємо глобальну максимальну суму, якщо поточна сума є більшою
    if (maxCurrent > maxGlobal) {
      maxGlobal = maxCurrent;
    }
  }

  // Повертаємо найбільшу знайдену суму підмасиву
  return maxGlobal;
}

// Приклад використання функції
const nums = [1, -2, 3, 4, -1, 2, 1, -5, 4];
// const nums = [8, 8, 8, 8, -1000, 0, 0, 0, 0, 9 , 9, 9, 9, -1000, 1, 10, 10, 10, 10];
// Виводимо результат на консоль, який повинен бути найбільшою сумою підмасиву
console.log(maxSubarraySum(nums)); // Виведе 9 : [3, 4, -1, 2, 1]
